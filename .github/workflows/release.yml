# ./workflows/release.yml
name: Release CI
# Perform a release by merging dev into the target branch and creating a signed tag.

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version for the release, without (v) prefix
        required: true
        default: 1.5.X
      target_branch:
        description: Target branch for the release
        required: true
        default: main

jobs:
  merge-and-release:
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH: dev
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      GIT_COMMITTER_NAME: ${{ github.actor }}
      GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
      GIT_AUTHOR_NAME: ${{ vars.BOT_NAME }}
      GIT_AUTHOR_EMAIL: ${{ vars.BOT_EMAIL }}
    steps:
      - name: Print current branch
        if: ${{ runner.debug == '1' }}
        run: echo "$GITHUB_REF"

      - name: Check if current user is allowed to run the workflow
        run: |
          if [ "${{ github.actor }}" != 'BMTLab' ]; then
            echo "Only the repository owner can run this workflow."
            exit 103
          fi
          #####

      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}

      - name: Validate version
        id: validate_version
        run: |
          VERSION=${{ github.event.inputs.version }}

          # Check if the version matches the pattern X.Y.Z
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo 'Invalid version format. The version must match the pattern X.Y.Z, where X,Y & Z are digits' >&2
            exit 101
          fi

          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)" || echo '1.0.0')
          LATEST_TAG=${LATEST_TAG#v}

          # Compare versions
          if [[ $(echo -e "$LATEST_TAG\n$VERSION" | sort -Vr | head -n1) != "$VERSION" ]]; then
            echo "The provided version $VERSION is not greater than the latest tag $LATEST_TAG" >&2
            exit 102
          fi

          echo "Version $VERSION is valid and greater than the latest tag $LATEST_TAG"
          #####

      - name: Fetch all branches
        run: git fetch --all

      - name: Setup GPG for signing
        uses: ./.github/actions/git-gpg-setup
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Merge source branch into target with theirs strategy
        run: |
          git merge origin/${{ env.SOURCE_BRANCH }} -X theirs \
            -m "Merge ${{ env.SOURCE_BRANCH }} into ${{ github.event.inputs.target_branch }} for release ${{ github.event.inputs.version }}"
          echo 'Merge commit successfully created'
          #####

#      - name: Verify merge commit signature
#        run: |
#          commit_hash=$(git rev-parse HEAD)
#          git verify-commit "$commit_hash"
#          echo 'Merge commit signature verified!'
#          #####

      - name: Push changes to target branch
        run: |
          git push origin ${{ github.event.inputs.target_branch }} --force-with-lease
          echo 'Merge commit successfully pushed!'
          #####

      - name: Create Tag
        run: |
          tag_name="v${{ github.event.inputs.version }}"
          git tag -a $tag_name -m "Release $TAG_NAME" --sign --file tag.sig
          echo "Tag $tag_name added"
          #####

      - name: Verify tag signature
        run: |
          tag_name="v${{ github.event.inputs.version }}"
          git tag -v "$tag_name"
          echo "Tag $tag_name signature verified!"
          #####

      - name: Push Tag
        run: |
          tag_name="v${{ github.event.inputs.version }}"
          git push origin $tag_name
          echo "Tag $tag_name successfully pushed"
          #####
